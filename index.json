[{"authors":null,"categories":null,"content":"Mansur Abdulfazov is a student of People’s Friendship University of Russia. He studies at the faculty of fundamental informatics and information technology at the first course.\n","date":1653609600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653609600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Mansur Abdulfazov is a student of People’s Friendship University of Russia. He studies at the faculty of fundamental informatics and information technology at the first course.","tags":null,"title":"Mansur Abdulfazov","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://mabdulfazov.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":[],"categories":[],"content":"News   Learned to work with hierarchies of classes of geometric objects in c++ Started developing a simple game on Python  My review of the week   I think last week was quite interesting.  ","date":1654033700,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654033700,"objectID":"5a97b173b4774603bbb0a7aad3ddb08e","permalink":"https://mabdulfazov.github.io/post/week232905/","publishdate":"2022-06-01T00:48:20+03:00","relpermalink":"/post/week232905/","section":"post","summary":"News   Learned to work with hierarchies of classes of geometric objects in c++ Started developing a simple game on Python  My review of the week   I think last week was quite interesting.","tags":[],"title":"Week 23.05 - 29.05","type":"post"},{"authors":[],"categories":[],"content":"News   Learned to work with vectors and matrices in c++ Started a new python project  My review of the week   I think last week was quite productive.  ","date":1653670988,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653670988,"objectID":"1ff272b7c51b1c87e7f7a71f7d899673","permalink":"https://mabdulfazov.github.io/post/week162205/","publishdate":"2022-05-27T20:03:08+03:00","relpermalink":"/post/week162205/","section":"post","summary":"News   Learned to work with vectors and matrices in c++ Started a new python project  My review of the week   I think last week was quite productive.","tags":[],"title":"Week 16.05 - 22.05","type":"post"},{"authors":null,"categories":null,"content":"Stages of project implementation.  1. Placement on Github pages of a blank for a personal site.\n  Install the required software. Download website theme template. Host it on a git host. Set parameter for URLs site. Place the site template on Github pages.  Stage execution: https://www.youtube.com/playlist?list=PLS-FXklqMDyElkIluG4BEl06g-zEnqlUY\n 2. Add information about yourself to the site. \n List of added data.  Post a photo of the site owner. Post a short description of the site owner (Biography). Add information about interests (Interests). Add information from education (Education).   Make a post last week. Add a post on a topic of your choice:  Version control. Git. Continuous Integration and Continuous Deployment (CI/CD).    Stage execution: https://www.youtube.com/playlist?list=PLS-FXklqMDyFmK3pshW9Y_aLbNXQKz-rh\n 3. Add achievements to the site. \n List of achievements.  Add information about skills (Skills). Add information about experience (Experience). Add information about achievements (Accomplishments).   Make a post last week. Add a post on a topic of your choice:  Lightweight markup languages. Markup languages. LaTeX. Markdown language.    Stage execution: https://www.youtube.com/playlist?list=PLS-FXklqMDyHC9ea-kWcKJPTPPKV__pPC\n 4. Add links to scientific and bibliometric resources to the site. \n Register on the relevant resources and place links to them on the site:  eLibrary : https://elibrary.ru/; Google Scholar : https://scholar.google.com/; ORCID : https://orcid.org/; Mendeley : https://www.mendeley.com/; ResearchGate : https://www.researchgate.net/; Academia.edu : https://www.academia.edu/; arXiv : https://arxiv.org/; github : https://github.com/.   Make a post last week. Add a post on a topic of your choice:  Report formatting. Creation of presentations. Bibliography work.    Stage execution: https://www.youtube.com/playlist?list=PLS-FXklqMDyFS0tg-kXiup9A5RC7Q_0nU\n 5. Add all other elements from the site. \n Make notes for personal projects. Make a post last week. Add a post on a topic of your choice.  Scientific programming languages.    Stage execution: In progress\n 6. Hosting a bilingual site on Github. \n Make support for English and Russian languages. Place site elements in both languages. Post content in both languages. Make a post last week. Add a post on a topic of your choice (in two languages).  Stage execution: https://www.youtube.com/watch?v=S7G3fOlvbeA\u0026amp;list=PLS-FXklqMDyFgvPJeY0bZXAmiMJNAhwog\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://mabdulfazov.github.io/project/example/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"Stages of project implementation.","tags":null,"title":"Personal Project","type":"project"},{"authors":["Mansur Abdulfazov"],"categories":["Demo"],"content":"Overview  A programming language is any set of rules that converts strings, or graphical program elements in the case of visual programming languages, to various kinds of machine code output. Programming languages are one kind of computer language, and are used in computer programming to implement algorithms.\nMost programming languages consist of instructions for computers. There are programmable machines that use a set of specific instructions, rather than general programming languages. Since the early 1800s, programs have been used to direct the behavior of machines such as Jacquard looms, music boxes and player pianos. The programs for these machines (such as a player piano’s scrolls) did not produce different behavior in response to different inputs or conditions.\nThousands of different programming languages have been created, and more are being created every year. Many programming languages are written in an imperative form (i.e., as a sequence of operations to perform) while other languages use the declarative form (i.e. the desired result is specified, not how to achieve it).\nThe description of a programming language is usually split into the two components of syntax (form) and semantics (meaning), which are usually defined by a formal language. Some languages are defined by a specification document (for example, the C programming language is specified by an ISO Standard) while other languages (such as Perl) have a dominant implementation that is treated as a reference. Some languages have both, with the basic language defined by a standard and extensions taken from the dominant implementation being common.\nProgramming language theory is a subfield of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages.\nDefinitions  A programming language is a notation for writing programs, which are specifications of a computation or algorithm. Some authors restrict the term “programming language” to those languages that can express all possible algorithms. Traits often considered important for what constitutes a programming language include:\nFunction and target A computer programming language is a language used to write computer programs, which involves a computer performing some kind of computation or algorithm and possibly control external devices such as printers, disk drives, robots, and so on. For example, PostScript programs are frequently created by another program to control a computer printer or display. More generally, a programming language may describe computation on some, possibly abstract, machine. It is generally accepted that a complete specification for a programming language includes a description, possibly idealized, of a machine or processor for that language. In most practical contexts, a programming language involves a computer; consequently, programming languages are usually defined and studied this way. Programming languages differ from natural languages in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines.\nAbstractions Programming languages usually contain abstractions for defining and manipulating data structures or controlling the flow of execution. The practical necessity that a programming language support adequate abstractions is expressed by the abstraction principle. This principle is sometimes formulated as a recommendation to the programmer to make proper use of such abstractions.\nExpressive power The theory of computation classifies languages by the computations they are capable of expressing. All Turing-complete languages can implement the same set of algorithms. ANSI/ISO SQL-92 and Charity are examples of languages that are not Turing complete, yet are often called programming languages.\nMarkup languages like XML, HTML, or troff, which define structured data, are not usually considered programming languages. Programming languages may, however, share the syntax with markup languages if a computational semantics is defined. XSLT, for example, is a Turing complete language entirely using XML syntax. Moreover, LaTeX, which is mostly used for structuring documents, also contains a Turing complete subset.\nThe term computer language is sometimes used interchangeably with programming language. However, the usage of both terms varies among authors, including the exact scope of each. One usage describes programming languages as a subset of computer languages. Similarly, languages used in computing that have a different goal than expressing computer programs are generically designated computer languages. For instance, markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming.\nAnother usage regards programming languages as theoretical constructs for programming abstract machines, and computer languages as the subset thereof that runs on …","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"6ffa37ce918ec15da2d8f902a72c806e","permalink":"https://mabdulfazov.github.io/post/clanguage/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/clanguage/","section":"post","summary":"A programming language is any set of rules that converts strings, or graphical program elements in the case of visual programming languages, to various kinds of machine code output. Programming languages are one kind of computer language, and are used in computer programming to implement algorithms.","tags":["Academic"],"title":"Programming language","type":"post"},{"authors":["Mansur Abdulfazov"],"categories":[],"content":"How to make a good presentation  Making a good presentation starts with crafting the content. No matter how compelling your message is, if you don’t get it out of your brain and on to the screen in a simple way, you’ll be met with a sea of blank faces. So, where to begin? 1. Create an easy-to-follow structure  When it comes to what you have to say, break it down into three simple sections: your presentation needs an introduction, body, and conclusion.   A compelling introduction. Your introduction needs to briefly sum up what you’re going to talk about and why it’s useful or relevant to your audience.\n  Offer a body of evidence. The body of your presentation is where you hit ’em with the facts, quotes, and evidence to back up your main points.\n  Sum up with key takeaways. The conclusion is where you loop back to your original statement and give the audience some key takeaways on how they can put into practice what they’ve learned.\n  No more than 10 slides in total. Who wants to sit through pages and pages of slides? No one, that’s who. By keeping your slide deck to 10 slides, even if your presentation is 30 minutes long, you’ll give the audience a chance to digest the on-screen messages in line with your talk. Using concept maps before structuring your slides can help keep to the point.\n  2. Limit the amount of copy on each slide  Less really is more, especially when it comes to making a good presentation. Too much text and the audience will just be reading the screen instead of looking at you and feeling the emotional impact of your message.   No more than six words per slide. Marketing king Seth Godin says we should have just six words per slide – that’s not a lot of copy. Choose your words carefully and rewrite until you’ve got it just right.\n  Think ‘bite-size’ information. We called ourselves Biteable a reason: studies have shown that information is retained better when it’s broken down into bite-sized chunks. Video is a great way to learn and research suggests it’s 95% more compelling than text.\n  3. Be savvy with design details  A good design can make or break a presentation. If you haven’t got the budget for a designer, presentation tools such as Pexels or Unsplash offer stunning royalty-free images.   Use color sparingly. Bright colors can dazzle, but too many can be offputting. Use the colors most relevant to your message. We’d recommend sticking with one or two (not counting black and white) for your palette so it has a consistent look and feel.\n  Be consistent with your font. Consistent design makes you look more professional. Don’t switch between caps and lower case, Times New Roman and Comic Sans, or 8 and 30 point text size. Stick with one font and one size throughout. You can vary the emphasis with your words later, but keep your on-screen text uniform for a more cohesive message.\n  Format for perfection. A wonky line on a slide or a badly pixelated graphic will put some people off, as it will look like you haven’t tried very hard (or worse, that you just aren’t very good). Make sure your text is aligned and neat like in the example below.\n  4. Polish several times  Just like some well-worn shoes, a good presentation often needs a few rounds of dusting before it’s all shiny and sparkly.   Start Messy. Don’t be afraid to start messy. Using a non-linear writing tool like Milanote allows you to explore and outline your initial ideas in a flexible way before you even open up Powerpoint or Keynote. Arrange your ideas side-by-side and discover new connections that you didn’t see before.\n  Edit ruthlessly. At first you might have a huge amount of information and will wonder how you’re ever going get it down to six words per slide. That’s OK. Keep editing ruthlessly until you’ve pared your message down to the bare essentials.\n  Get someone else to look at it. A fresh pair of eyes can work miracles when it comes to refining your presentation. Get a trusted mentor or colleague to review your work. If you don’t know anyone who can help, an online writing assistant like ProWritingAid or Grammarly can help you weed out a lot of problems.\n  How to give a good presentation  How you deliver your slides is as important as their content and design. Here are some quick pointers to help you get your message across with impact. 5. Have a strong opening  How you start and finish your presentation will make all the difference. Audiences usually make up their minds about someone in the first 7 seconds, so make those first moments count.   Be different. You’re doing a presentation about saving tree frogs in Costa Rica. You open with an amusing story about one that escaped on a bunch of bananas to the UK. A story like this is different and unexpected for your audience, so they’ll sit up and take notice.\n  Ask a question. Rhetorical questions are a great way to frame a topic and introduce ideas. Martin Luther King Jr. said: ‘there are those who are asking the devotees of civil rights, “When will you be satisfied?’” …","date":1653084883,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653084883,"objectID":"214c5924b1b133f59de9102689098968","permalink":"https://mabdulfazov.github.io/post/presentation/","publishdate":"2022-05-21T01:14:43+03:00","relpermalink":"/post/presentation/","section":"post","summary":"How to make a good presentation  Making a good presentation starts with crafting the content. No matter how compelling your message is, if you don’t get it out of your brain and on to the screen in a simple way, you’ll be met with a sea of blank faces.","tags":[],"title":"Presentation","type":"post"},{"authors":[],"categories":[],"content":"News   Learned to work with vectors in c++ Started a new python project  My review of the week   I think last week was quite productive.  ","date":1653084478,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653084478,"objectID":"ea82759e81ebcb74a932b0675eb593c7","permalink":"https://mabdulfazov.github.io/post/week091505/","publishdate":"2022-05-21T01:07:58+03:00","relpermalink":"/post/week091505/","section":"post","summary":"News   Learned to work with vectors in c++ Started a new python project  My review of the week   I think last week was quite productive.  ","tags":[],"title":"Week 09.05 - 15.05","type":"post"},{"authors":[],"categories":[],"content":"News    Got basic knowledge of python programming language\n  Wrote a shop program in c++ programming language\n  My review of the week   I think this week is quite productive.  ","date":1652542782,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652542782,"objectID":"223e7827bf0cea5639800f8abbf3a41b","permalink":"https://mabdulfazov.github.io/post/week020805/","publishdate":"2022-05-14T18:39:42+03:00","relpermalink":"/post/week020805/","section":"post","summary":"News    Got basic knowledge of python programming language\n  Wrote a shop program in c++ programming language\n  My review of the week   I think this week is quite productive.","tags":[],"title":"Week 02.05 - 08.05","type":"post"},{"authors":["Mansur Abdulfazov"],"categories":["Demo"],"content":"Overview Git is a software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).\nGit was originally authored by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Since 2005, Junio Hamano has been the core maintainer. As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.Git is free and open-source software distributed under the GPL-2.0-only license.\nHistory Git development began in April 2005, after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source-control management (SCM) system that they had been using to maintain the project since 2002. The copyright holder of BitKeeper, Larry McVoy, had withdrawn free use of the product after claiming that Andrew Tridgell had created SourcePuller by reverse engineering the BitKeeper protocols. The same incident also spurred the creation of another version-control system, Mercurial.\nLinus Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs. Torvalds cited an example of a source-control management system needing 30 seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where synchronizing with fellow maintainers could require 250 such actions at once. For his design criterion, he specified that patching should take no more than three seconds, and added three more goals:\n Take Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision. Support a distributed, BitKeeper-like workflow. Include very strong safeguards against corruption, either accidental or malicious.  These criteria eliminated every version-control system in use at the time, so immediately after the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own.\nThe development of Git began on 3 April 2005. Torvalds announced the project on 6 April and became self-hosting the next day. The first merge of multiple branches took place on 18 April. Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 patches per second. On 16 June, Git managed the kernel 2.6.12 release.\nTorvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project. Hamano was responsible for the 1.0 release on 21 December 2005 and remains the project’s core maintainer.\nNaming Torvalds sarcastically quipped about the name git (which means “unpleasant person” in British English slang): “I’m an egotistical bastard, and I name all my projects after myself. First ‘Linux’, now ‘git’.” The man page describes Git as “the stupid content tracker”. The read-me file of the source code elaborates further:\n  “git” can mean anything, depending on your mood.\n  Random three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of “get” may or may not be relevant.\n  Stupid. Contemptible and despicable. Simple. Take your pick from the dictionary of slang.\n  “Global information tracker”: you’re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.\n  “Goddamn idiotic truckload of sh*t”: when it breaks.\n  Implementations Git (the main implementation in C) is primarily developed on Linux, although it also supports most major operating systems, including the BSDs (DragonFly BSD, FreeBSD, NetBSD, and OpenBSD), Solaris, macOS, and Windows.\nThe first Windows port of Git was primarily a Linux-emulation framework that hosts the Linux version. Installing Git under Windows creates a similarly named Program Files directory containing the Mingw-w64 port of the GNU Compiler Collection, Perl 5, MSYS2 (itself a fork of Cygwin, a Unix-like emulation environment for Windows) and various other Windows ports or emulations of Linux utilities and libraries. Currently, native Windows builds of Git are distributed as 32- and 64-bit installers. The git official website currently maintains a build of Git for Windows, still using the MSYS2 environment.\nThe JGit implementation of Git is a pure Java software library, designed to be embedded in any Java application. JGit is used in the Gerrit code-review tool, and in EGit, a Git client for the Eclipse IDE.\nGo-git is an open-source implementation of Git written in pure Go. It is currently …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://mabdulfazov.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Git is a software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing  source code during  software development.","tags":["Academic"],"title":"Git","type":"post"},{"authors":["Mansur Abdulfazov"],"categories":["Demo"],"content":"Overview  LaTeX is a software system for document preparation. When writing, the writer uses plain text as opposed to the formatted text found in “What You See Is What You Get” word processors like Microsoft Word, LibreOffice Writer and Apple Pages. The writer uses markup tagging conventions to define the general structure of a document to stylise text throughout a document (such as bold and italics), and to add citations and cross-references. A TeX distribution such as TeX Live or MiKTeX is used to produce an output file (such as PDF or DVI) suitable for printing or digital distribution.\nLaTeX is widely used in academia for the communication and publication of scientific documents in many fields, including mathematics, computer science, engineering, physics, chemistry, economics, linguistics, quantitative psychology, philosophy, and political science. It also has a prominent role in the preparation and publication of books and articles that contain complex multilingual materials, such as Sanskrit and Greek. LaTeX uses the TeX typesetting program for formatting its output, and is itself written in the TeX macro language.\nLaTeX can be used as a standalone document preparation system, or as an intermediate format. In the latter role, for example, it is sometimes used as part of a pipeline for translating DocBook and other XML-based formats to PDF. The typesetting system offers programmable desktop publishing features and extensive facilities for automating most aspects of typesetting and desktop publishing, including numbering and cross-referencing of tables and figures, chapter and section headings, the inclusion of graphics, page layout, indexing and bibliographies.\nLike TeX, LaTeX started as a writing tool for mathematicians and computer scientists, but even from early in its development, it has also been taken up by scholars who needed to write documents that include complex math expressions or non-Latin scripts, such as Arabic, Devanagari and Chinese.\nLaTeX is intended to provide a high-level, descriptive markup language that accesses the power of TeX in an easier way for writers. In essence, TeX handles the layout side, while LaTeX handles the content side for document processing. LaTeX comprises a collection of TeX macros and a program to process LaTeX documents, and because the plain TeX formatting commands are elementary, it provides authors with ready-made commands for formatting and layout requirements such as chapter headings, footnotes, cross-references and bibliographies.\nLaTeX was originally written in the early 1980s by Leslie Lamport at SRI International. The current version is LaTeX2e (stylised as LATEX2ε), released in 1994, but updated in 2020. LaTeX3 (LATEX3) has been under long-term development since the early 1990s. LaTeX is free software and is distributed under the LaTeX Project Public License (LPPL).\nTypesetting system  LaTeX attempts to follow the design philosophy of separating presentation from content, so that authors can focus on the content of what they are writing without attending simultaneously to its visual appearance. In preparing a LaTeX document, the author specifies the logical structure using simple, familiar concepts such as chapter, section, table, figure, etc., and lets the LaTeX system handle the formatting and layout of these structures. As a result, it encourages the separation of the layout from the content — while still allowing manual typesetting adjustments whenever needed. This concept is similar to the mechanism by which many word processors allow styles to be defined globally for an entire document, or the use of Cascading Style Sheets in styling HTML documents.\nThe LaTeX system is a markup language that handles typesetting and rendering, and can be arbitrarily extended by using the underlying macro language to develop custom macros such as new environments and commands. Such macros are often collected into _packages,_which could then be made available to address some specific typesetting needs such as the formatting of complex mathematical expressions or graphics (e.g., the use of the alignenvironment provided by the amsmath package to produce aligned equations).\nIn order to create a document in LaTeX, you first write a file, say document.tex, using your preferred text editor. Then you give your document.tex file as input to the TeX program (with the LaTeX macros loaded), which prompts TeX to write out a file suitable for onscreen viewing or printing. This write-format-preview cycle is one of the chief ways in which working with LaTeX differs from the What-You-See-Is-What-You-Get (WYSIWYG) style of document editing. It is similar to the code-compile-execute cycle known to computer programmers. Today, many LaTeX-aware editing programs make this cycle a simple matter through the pressing of a single key, while showing the output preview on the screen beside the input window. Some online LaTeX editors even automatically refresh the preview, while other online …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"75b881dcb33092e405db4b74fe9a32a0","permalink":"https://mabdulfazov.github.io/post/latex/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/latex/","section":"post","summary":"LaTeX  is a software system for document preparation.","tags":["Academic"],"title":"LaTeX","type":"post"},{"authors":["Mansur Abdulfazov"],"categories":["Demo"],"content":"Overview  Accessing Portage\nPorthole graphical frontend. Portage is similar to the BSD-style package management known as ports, and was originally designed with FreeBSD’s ports in mind. Portage is written in the Python programming language, and is the main utility that defines Gentoo. Although the system itself is known as Portage, it consists of two main parts, the ebuild system and emerge. The ebuild system takes care of the actual work of building and installing packages, while emerge provides an interface to ebuild: managing an ebuild repository, resolving dependencies and similar issues. (These two therefore have roughly the same relation as rpm has with yum, or dpkg has with APT.)\nA GTK+-based GUI, Porthole, is available for working with Portage. There is also the Himerge GUI, which stands for “Haskell Interface for eMerge”.\nFunctions provided\nPortage is characterized by its main function: compiling from source code the packages the user wishes to install. In doing so it allows customization of compiler and target-application options to fit the system’s specifications and the user’s own wishes. Functionalities related to system management include: allowing parallel package-version installation, tracking cross-package dependencies, managing a database of installed packages, providing a local ebuild repository, and synchronizing of the local Portage tree with remote repositories. Functionalities related to individual package installation include: specifying compilation settings for the target machine and choosing package components.\nPortage distinguishes between three levels of stability in ebuilds: stable (e.g., the software works as intended with no known security issues at time of release), keyword masked (mainly for packages that have not been sufficiently tested on the target system architecture to be considered stable) and hard masked (broken or very insecure) packages.\nFeatures  Emerge\nUnmerge of SpaceFM file manager The emerge command-line tool is the heart of Portage. The command is customizable with many options and modifiers. The emerge tool is the most important utility for accessing the features of Portage from the command line.\nThe program calculates and manages dependencies, executes ebuilds and maintains the local Portage tree and database of installed packages. The compilation settings used by ebuilds can be changed through the CFLAGS environment variable, based on the specifications of the individual computer and on the user’s desire for optimization. The emerge utility executes ebuilds in a sandbox environment. This way the system is protected from software executed by the ebuild and resulting binaries are only merged after a successful build and sandboxed install.\nWhat emerge installs as dependencies is affected by the USE flag-settings. They decide which optional features will be included when installing or upgrading an application. The emerge command can also be used to download and install precompiled binary files.\nUSE flags\nPortage during system update The Portage system offers the use of “USE flags”, which allows users to indicate which software features they would like to include (and exclude) while building packages. For example, there is a USE flag to include DVD support, where available, in packages compiled with the flag enabled. The USE flags affect which dependencies are required, generally affecting which optional features will be built into a given program when it is compiled. For example, in packages which use a configure script, the USE flag feature would translate to ./configure –with-feature.\nThe specification of USE flags is the usual way to configure programs on Gentoo. USE flags may be set manually, or via user-friendly tools such as ‘ufed’ (USE flag editor), which lists flags along with their description. A list of available USE flags is available at the Gentoo website’s USE Flag Index.\nEmerge\nUnmerge of SpaceFM file manager The emerge command-line tool is the heart of Portage. The command is customizable with many options and modifiers. The emerge tool is the most important utility for accessing the features of Portage from the command line.\nThe program calculates and manages dependencies, executes ebuilds and maintains the local Portage tree and database of installed packages. The compilation settings used by ebuilds can be changed through the CFLAGS environment variable, based on the specifications of the individual computer and on the user’s desire for optimization. The emerge utility executes ebuilds in a sandbox environment. This way the system is protected from software executed by the ebuild and resulting binaries are only merged after a successful build and sandboxed install.\nWhat emerge installs as dependencies is affected by the USE flag-settings. They decide which optional features will be included when installing or upgrading an application. The emerge command can also be used to download and install precompiled binary files.\nUSE flags\nPortage …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"4e160eb59b89190db4480c07ffc3966a","permalink":"https://mabdulfazov.github.io/post/portage/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/portage/","section":"post","summary":"Portage is a package management system originally created for and used by Gentoo Linux and also by Chrome OS, Calculate, Sabayon, and Funtoo Linux among others. Portage is based on the concept of ports collections. Gentoo is sometimes referred to as a meta-distribution due to the extreme flexibility of Portage, which makes it operating-system-independent. The Gentoo/Alt project is concerned with using Portage to manage other operating systems, such as BSDs, macOS and Solaris. The most notable of these implementations is the Gentoo/FreeBSD project.","tags":["Academic"],"title":"Portage (software)","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://mabdulfazov.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Mansur Abdulfazov","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://mabdulfazov.github.io/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]