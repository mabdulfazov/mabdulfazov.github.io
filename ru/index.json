[{"authors":null,"categories":null,"content":"Мансур Абдулфазов – студент Российского университета дружбы народов. Учится на факультете фундаментальной информатики и информационных технологий на первом курсе.\n","date":1653609600,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1653609600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Мансур Абдулфазов – студент Российского университета дружбы народов. Учится на факультете фундаментальной информатики и информационных технологий на первом курсе.","tags":null,"title":"Абдулфазов Мансур","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://example.com/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":[],"categories":[],"content":"Новости   Научился работать с иерархиями классов геометрических объектов в c++ Начал разрабатывать простую игру на Python  Мой обзор на неделю   Я думаю, что прошлая неделя была довольно интересной.  ","date":1654033700,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1654033700,"objectID":"5a97b173b4774603bbb0a7aad3ddb08e","permalink":"https://example.com/ru/post/week232905/","publishdate":"2022-06-01T00:48:20+03:00","relpermalink":"/ru/post/week232905/","section":"post","summary":"Новости   Научился работать с иерархиями классов геометрических объектов в c++ Начал разрабатывать простую игру на Python  Мой обзор на неделю   Я думаю, что прошлая неделя была довольно интересной.","tags":[],"title":"Неделя 23.05 - 29.05","type":"post"},{"authors":[],"categories":[],"content":"Нововсти   Научился работать с векторами и матрицами в C++ Начал новый проект на питоне  Мой обзор на неделю   Думаю, прошедшая неделя была достаточно продуктивной.  ","date":1653670988,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653670988,"objectID":"1ff272b7c51b1c87e7f7a71f7d899673","permalink":"https://example.com/ru/post/week162205/","publishdate":"2022-05-27T20:03:08+03:00","relpermalink":"/ru/post/week162205/","section":"post","summary":"Нововсти   Научился работать с векторами и матрицами в C++ Начал новый проект на питоне  Мой обзор на неделю   Думаю, прошедшая неделя была достаточно продуктивной.  ","tags":[],"title":"Неделя 16.05 - 22.05","type":"post"},{"authors":null,"categories":null,"content":"Этапы реализации проекта.    Размещение на Github pages заготовки для персонального сайта.\n Установить необходимое программное обеспечение. Скачать шаблон темы сайта. Разместить его на хостинге git. Установить параметр для URLs сайта. Разместить заготовку сайта на Github pages.    Выполнение этапа: https://www.youtube.com/playlist?list=PLS-FXklqMDyElkIluG4BEl06g-zEnqlUY\n  Добавить к сайту данные о себе.\n Список добавляемых данных.  Разместить фотографию владельца сайта. Разместить краткое описание владельца сайта (Biography). Добавить информацию об интересах (Interests). Добавить информацию от образовании (Education).   Сделать пост по прошедшей неделе. Добавить пост на тему по выбору:  Управление версиями. Git. Непрерывная интеграция и непрерывное развертывание (CI/CD).      Выполнение этапа: https://www.youtube.com/playlist?list=PLS-FXklqMDyFmK3pshW9Y_aLbNXQKz-rh\n  Добавить к сайту достижения.\n Список достижений.  Добавить информацию о навыках (Skills). Добавить информацию об опыте (Experience). Добавить информацию о достижениях (Accomplishments).   Сделать пост по прошедшей неделе. Добавить пост на тему по выбору:  Легковесные языки разметки. Языки разметки. LaTeX. Язык разметки Markdown.      Выполнение этапа: https://www.youtube.com/playlist?list=PLS-FXklqMDyHC9ea-kWcKJPTPPKV__pPC\n  Добавить к сайту ссылки на научные и библиометрические ресурсы.\n Зарегистрироваться на соответствующих ресурсах и разместить на них ссылки на сайте:  eLibrary : https://elibrary.ru/; Google Scholar : https://scholar.google.com/; ORCID : https://orcid.org/; Mendeley : https://www.mendeley.com/; ResearchGate : https://www.researchgate.net/; Academia.edu : https://www.academia.edu/; arXiv : https://arxiv.org/; github : https://github.com/.   Сделать пост по прошедшей неделе. Добавить пост на тему по выбору:  Оформление отчёта. Создание презентаций. Работа с библиографией.      Stage execution: https://www.youtube.com/playlist?list=PLS-FXklqMDyFS0tg-kXiup9A5RC7Q_0nU\n  Добавить с сайту все остальные элементы.\n Сделать записи для персональных проектов. Сделать пост по прошедшей неделе. Добавить пост на тему по выбору.  Языки научного программирования.      Выполнение этапа: https://youtube.com/playlist?list=PLS-FXklqMDyHLbUk16D22-QF66HKldA8G\n  Размещение двуязычного сайта на Github.\n Сделать поддержку английского и русского языков. Разместить элементы сайта на обоих языках. Разместить контент на обоих языках. Сделать пост по прошедшей неделе. Добавить пост на тему по выбору (на двух языках).    Выполнение этапа: https://www.youtube.com/watch?v=S7G3fOlvbeA\u0026amp;list=PLS-FXklqMDyFgvPJeY0bZXAmiMJNAhwog\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://example.com/ru/project/example/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/project/example/","section":"project","summary":"Этапы реализации проекта.","tags":null,"title":"Индивидуальный проект","type":"project"},{"authors":["Абдулфазов Мансур"],"categories":["Demo"],"content":"Обзор  Язык программирования — это любой набор правил, который преобразует строки или графические элементы программы в случае визуальных языков программирования в различные виды вывода машинного кода. Языки программирования — это один из видов компьютерных языков, которые используются в компьютерном программировании для реализации алгоритмов.\nБольшинство языков программирования состоят из инструкций для компьютеров. Существуют программируемые машины, которые используют набор определенных инструкций, а не общие языки программирования. С начала 1800-х годов программы использовались для управления поведением таких машин, как жаккардовые ткацкие станки, музыкальные шкатулки и пианино. Программы для этих машин (такие как свитки пианино) не давали разного поведения в ответ на разные входные данные или условия.\nСозданы тысячи различных языков программирования, и с каждым годом их становится все больше. Многие языки программирования написаны в императивной форме (т. е. как последовательность выполняемых операций), в то время как другие языки используют декларативную форму (т. е. указывается желаемый результат, а не способ его достижения).\nОписание языка программирования обычно разбивается на два компонента: синтаксис (форма) и семантика (значение), которые обычно определяются формальным языком. Некоторые языки определяются документом спецификации (например, язык программирования C определяется стандартом ISO), в то время как другие языки (например, Perl) имеют доминирующую реализацию, которая рассматривается как эталон. В некоторых языках есть и то, и другое, при этом базовый язык определяется стандартом, а расширения, взятые из доминирующей реализации, являются общими.\nТеория языков программирования — это раздел компьютерных наук, который занимается проектированием, реализацией, анализом, характеристикой и классификацией языков программирования.\nОпределения  Язык программирования — это нотация для написания программ, которые являются спецификациями вычислений или алгоритмов. Некоторые авторы ограничивают термин «язык программирования» теми языками, которые могут выражать все возможные алгоритмы. Черты, которые часто считаются важными для того, что составляет язык программирования, включают:\nФункция и цель Язык компьютерного программирования — это язык, используемый для написания компьютерных программ, в которых компьютер выполняет какие-то вычисления или алгоритмы и, возможно, управляет внешними устройствами, такими как принтеры, дисководы, роботы и т. д. Например, программы PostScript часто создаются другой программой для управления компьютерным принтером или дисплеем. В более общем смысле язык программирования может описывать вычисления на некоторой, возможно, абстрактной машине. Общепринято, что полная спецификация языка программирования включает описание, возможно идеализированное, машины или процессора для этого языка. В большинстве практических случаев язык программирования связан с компьютером; следовательно, языки программирования обычно определяются и изучаются таким образом. Языки программирования отличаются от естественных языков тем, что естественные языки используются только для взаимодействия между людьми, а языки программирования также позволяют людям передавать инструкции машинам.\nАбстракции Языки программирования обычно содержат абстракции для определения и управления структурами данных или управления потоком выполнения. Практическая необходимость того, чтобы язык программирования поддерживал адекватные абстракции, выражается принципом абстракции. Этот принцип иногда формулируется как рекомендация программисту правильно использовать такие абстракции.\nВыразительная сила Теория вычислений классифицирует языки по тем вычислениям, которые они способны выражать. Все полные по Тьюрингу языки могут реализовывать один и тот же набор алгоритмов. ANSI/ISO SQL-92 и Charity являются примерами языков, которые не являются полными по Тьюрингу, но их часто называют языками программирования.\nЯзыки разметки, такие как XML, HTML или troff, которые определяют структурированные данные, обычно не считаются языками программирования. Однако языки программирования могут использовать синтаксис совместно с языками разметки, если определена вычислительная семантика. XSLT, например, является полным по Тьюрингу языком, полностью использующим синтаксис XML. Более того, LaTeX, который в основном используется для структурирования документов, также содержит полное подмножество по Тьюрингу.\nТермин компьютерный язык иногда используется взаимозаменяемо с языком программирования. Однако использование обоих терминов варьируется у разных авторов, включая точную сферу применения каждого из них. Одно использование описывает языки программирования как подмножество компьютерных языков. Точно так же языки, используемые в вычислениях, которые имеют иную цель, чем выражение компьютерных программ, называются компьютерными языками общего назначения. Например, языки разметки иногда называют компьютерными языками, чтобы подчеркнуть, что они не …","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"6ffa37ce918ec15da2d8f902a72c806e","permalink":"https://example.com/ru/post/clanguage/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/post/clanguage/","section":"post","summary":"Язык программирования — это любой набор правил, который преобразует строки или графические элементы программы в случае визуальных языков программирования в различные виды вывода машинного кода. Языки программирования — это один из видов компьютерных языков, которые используются в компьютерном программировании для реализации алгоритмов.","tags":["Academic"],"title":"Языки программирования","type":"post"},{"authors":["Абдулфазов Мансур"],"categories":[],"content":"Как сделать хорошую презентацию  Создание хорошей презентации начинается с создания содержания. Каким бы убедительным ни было ваше сообщение, если вы не вынесете его из головы и не выведете на экран простым способом, вас встретит море пустых лиц. Итак, с чего начать?\n1. Создайте удобную структуру  Когда дело доходит до того, что вы хотите сказать, разбейте его на три простых части: вашей презентации нужно введение, основная часть и заключение.\n  Убедительное введение. Во введении должно быть кратко изложено, о чем вы собираетесь говорить и почему это полезно или актуально для вашей аудитории.\n  Предложите совокупность доказательств. Основная часть вашей презентации — это место, где вы поражаете их фактами, цитатами и доказательствами, подтверждающими ваши основные положения.\n  Подведите итоги с ключевыми выводами. В заключении вы возвращаетесь к исходному заявлению и даете аудитории несколько ключевых выводов о том, как они могут применить на практике то, что узнали.\n  Всего не более 10 слайдов. Кто хочет сидеть на страницах и страницах слайдов? Никто, вот кто. Сократив количество слайдов до 10, даже если ваша презентация длится 30 минут, вы дадите аудитории возможность переварить сообщения на экране в соответствии с вашим выступлением. Использование концептуальных карт перед структурированием слайдов может помочь не отклоняться от сути.\n  2. Ограничьте количество копий на каждом слайде  Меньше на самом деле больше, особенно когда дело доходит до хорошей презентации. Слишком много текста, и аудитория будет просто читать экран, а не смотреть на вас и чувствовать эмоциональное воздействие вашего сообщения.\n  Не более шести слов на слайде. Король маркетинга Сет Годин говорит, что на слайде должно быть всего шесть слов — это немного. Тщательно подбирайте слова и переписывайте, пока не добьетесь нужного результата.\n  ** Думайте об информации размером с укус**. Мы назвали себя Biteable по той причине, что исследования показали, что информация сохраняется лучше, когда она разбита на кусочки размером с укус. Видео — отличный способ учиться, и исследования показывают, что оно на 95% более убедительно, чем текст.\n  3. Будьте подкованы в деталях дизайна  Хороший дизайн может сделать или испортить презентацию. Если у вас нет бюджета на дизайнера, инструменты для презентаций, такие как Pexels или Unsplash, предлагают потрясающие бесплатные изображения.\n  Используйте цвет экономно. Яркие цвета могут ослепить, но слишком много может оттолкнуть. Используйте цвета, наиболее соответствующие вашему сообщению. Мы рекомендуем придерживаться одного или двух (не считая черного и белого) для вашей палитры, чтобы она имела согласованный внешний вид.\n  Следите за своим шрифтом. Последовательный дизайн заставляет вас выглядеть более профессионально. Не переключайтесь между прописными и строчными буквами, Times New Roman и Comic Sans или размером текста 8 и 30 пунктов. Придерживайтесь одного шрифта и одного размера во всем. Вы можете изменить акцент на словах позже, но сохраняйте единообразие текста на экране, чтобы сообщение было более связным.\n  Формат для совершенства. Неровная линия на слайде или сильно пикселизированная графика оттолкнет некоторых людей, поскольку будет выглядеть так, будто вы не очень старались (или, что еще хуже, что вы просто не очень хороши). Убедитесь, что ваш текст выровнен и аккуратен, как в примере ниже.\n  4. Публиковать несколько раз  Как и в случае с поношенными туфлями, хорошая презентация часто нуждается в нескольких чистках от пыли, прежде чем она станет блестящей и сверкающей.\n  Начать беспорядок. Не бойтесь начать грязно. Использование инструмента для нелинейного письма, такого как Milanote, позволяет вам исследовать и излагать свои первоначальные идеи гибким способом еще до того, как вы откроете Powerpoint или Keynote. Расположите свои идеи рядом и откройте для себя новые связи, которых раньше не замечали.\n  Редактировать безжалостно. Поначалу у вас может быть огромное количество информации, и вы будете задаваться вопросом, как вы собираетесь сократить ее до шести слов на слайде. Все нормально. Продолжайте безжалостно редактировать, пока не сократите свое сообщение до самого необходимого.\n  Попросите кого-нибудь еще посмотреть на это. Свежий взгляд может творить чудеса, когда дело доходит до улучшения вашей презентации. Попросите надежного наставника или коллегу оценить вашу работу. Если вы не знаете никого, кто мог бы помочь, онлайн-помощник по письму, такой как ProWritingAid или Grammarly, может помочь вам избавиться от множества проблем.\n  Как выступить с хорошей презентацией  То, как вы представляете свои слайды, так же важно, как их содержание и дизайн. Вот несколько простых советов, которые помогут вам эффективно донести свое сообщение.\n5. Иметь уверенное вступление  То, как вы начнете и закончите свою презентацию, будет иметь большое значение. Зрители обычно составляют свое мнение о ком-то в первые 7 секунд, так что учитывайте эти первые моменты.\n  Будь другим. Вы делаете презентацию о …","date":1653084883,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653084883,"objectID":"214c5924b1b133f59de9102689098968","permalink":"https://example.com/ru/post/presentation/","publishdate":"2022-05-21T01:14:43+03:00","relpermalink":"/ru/post/presentation/","section":"post","summary":"Как сделать хорошую презентацию  Создание хорошей презентации начинается с создания содержания. Каким бы убедительным ни было ваше сообщение, если вы не вынесете его из головы и не выведете на экран простым способом, вас встретит море пустых лиц.","tags":[],"title":"Презентация","type":"post"},{"authors":[],"categories":[],"content":"Нововсти   Научился работать с векторами в C++ Начал новый проект на питоне  Мой обзор на неделю   Думаю, прошедшая неделя была достаточно продуктивной.  ","date":1653084478,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653084478,"objectID":"ea82759e81ebcb74a932b0675eb593c7","permalink":"https://example.com/ru/post/week091505/","publishdate":"2022-05-21T01:07:58+03:00","relpermalink":"/ru/post/week091505/","section":"post","summary":"Нововсти   Научился работать с векторами в C++ Начал новый проект на питоне  Мой обзор на неделю   Думаю, прошедшая неделя была достаточно продуктивной.  ","tags":[],"title":"Неделя 09.05 - 15.05","type":"post"},{"authors":[],"categories":[],"content":"Новости    Получил базовые знания языка программирования python\n  Написал программу магазина на языке программирования c++.\n  Мой обзор на неделю   Думаю, эта неделя будет достаточно продуктивной.  ","date":1652542782,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652542782,"objectID":"223e7827bf0cea5639800f8abbf3a41b","permalink":"https://example.com/ru/post/week020805/","publishdate":"2022-05-14T18:39:42+03:00","relpermalink":"/ru/post/week020805/","section":"post","summary":"Новости    Получил базовые знания языка программирования python\n  Написал программу магазина на языке программирования c++.\n  Мой обзор на неделю   Думаю, эта неделя будет достаточно продуктивной.","tags":[],"title":"Неделя 02.05 - 08.05","type":"post"},{"authors":["Абдулфазов Мансур"],"categories":["Demo"],"content":"Обзор Git — это программа для отслеживания изменений в любом наборе файлов, обычно используемая для координации работы программистов, совместно разрабатывающих исходный код во время разработки программного обеспечения. Его цели включают скорость, целостность данных и поддержку распределенных нелинейных рабочих процессов (тысячи параллельных ветвей, работающих в разных системах).\nПервоначально Git был создан Линусом Торвальдсом в 2005 году для разработки ядра Linux, а другие разработчики ядра внесли свой вклад в его первоначальную разработку. С 2005 года основным сопровождающим является Хунио Хамано. Как и в большинстве других распределенных систем управления версиями и в отличие от большинства клиент-серверных систем, каждый каталог Git на каждом компьютере представляет собой полноценный репозиторий с полной историей и полными возможностями отслеживания версий, независимо от доступа к сети или центрального сервера. бесплатное программное обеспечение с открытым исходным кодом, распространяемое только по лицензии GPL-2.0.\nИстория Разработка Git началась в апреле 2005 года, после того как многие разработчики ядра Linux отказались от доступа к BitKeeper, проприетарной системе управления исходным кодом (SCM), которую они использовали для поддержки проекта с 2002 года. Владелец авторских прав BitKeeper Ларри Маквой , отказалась от бесплатного использования продукта после того, как заявила, что Эндрю Триджелл создал SourcePuller путем обратного проектирования протоколов BitKeeper. Тот же самый инцидент подстегнул создание еще одной системы контроля версий, Mercurial.\nЛинусу Торвальдсу нужна была распределенная система, которую он мог бы использовать как BitKeeper, но ни одна из доступных бесплатных систем не соответствовала его потребностям. Торвальдс привел пример системы управления исходным кодом, которой требуется 30 секунд, чтобы применить исправление и обновить все связанные метаданные, и отметил, что это не соответствует потребностям разработки ядра Linux, где синхронизация с другими сопровождающими может потребовать 250 таких действий за раз. однажды. В качестве критерия дизайна он указал, что исправление должно занимать не более трех секунд, и добавил еще три цели:\n Возьмем Concurrent Versions System (CVS) в качестве примера того, что нельзя делать; если сомневаетесь, примите прямо противоположное решение. Поддержка распределенного рабочего процесса, подобного BitKeeper. Включите очень надежные средства защиты от случайного или злонамеренного повреждения.  Эти критерии исключали все системы контроля версий, использовавшиеся в то время, поэтому сразу после разработки ядра Linux 2.6.12-rc2 Торвальдс решил написать свою собственную.\nРазработка Git началась 3 апреля 2005 года. Торвальдс объявил о проекте 6 апреля и на следующий день стал самостоятельным хостингом. Первое слияние нескольких филиалов состоялось 18 апреля. Торвальдс достиг поставленных целей; 29 апреля зарождающийся Git был протестирован с записью исправлений к дереву ядра Linux со скоростью 6,7 исправлений в секунду. 16 июня Git выпустил версию ядра 2.6.12.\n26 июля 2005 г. компания orvalds передала техническое обслуживание Хунио Хамано, основному участнику проекта. Хамано отвечал за выпуск 1.0 21 декабря 2005 г. и остается основным сопровождающим проекта.\nНазвание Торвальдс саркастически пошутил по поводу имени git (что означает «неприятный человек» на британском английском сленге): «Я эгоистичный ублюдок и называю все свои проекты своим именем. Сначала «Linux», теперь «git». На справочной странице Git описывается как «тупой трекер контента». Файл readme с исходным кодом уточняется далее:\n  “git” может означать что угодно, в зависимости от вашего настроения.\n  Произвольная комбинация из трех букв, которая произносится и фактически не используется какой-либо общей командой UNIX. Тот факт, что это неправильное произношение слова «получить», может иметь значение, а может и не иметь.\n  Глупый. Презренный и презренный. Простой. Выбирайте из словаря сленга.\n  «Глобальный информационный трекер»: у вас хорошее настроение, и это действительно работает на вас. Ангелы поют, и свет внезапно наполняет комнату.\n  “Чертов идиотский грузовик с дерьмом”: когда он ломается.\n   Git (основная реализация на C) в основном разработан для Linux, хотя он также поддерживает большинство основных операционных систем, включая BSD (DragonFly BSD, FreeBSD, NetBSD и OpenBSD), Solaris, macOS и Windows.\nПервый порт Git для Windows был в первую очередь фреймворком эмуляции Linux, на котором размещена версия Linux. При установке Git под Windows создается каталог Program Files с аналогичным названием, содержащий порт Mingw-w64 коллекции компиляторов GNU, Perl 5, MSYS2 (который сам является ответвлением Cygwin, Unix-подобной среды эмуляции для Windows) и различные другие порты или эмуляции Windows. утилит и библиотек Linux. В настоящее время собственные сборки Git для Windows распространяются в виде 32- и 64-разрядных установщиков. Официальный веб-сайт git в настоящее время …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://example.com/ru/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/getting-started/","section":"post","summary":"Git — это программное обеспечение для отслеживания изменений в любом наборе файлов, обычно используемое для координации работы программистов, совместно разрабатывающих исходный код во время разработки программного обеспечения.","tags":["Academic"],"title":"Git","type":"post"},{"authors":["Абдулфазов Мансур"],"categories":["Demo"],"content":"Обзор  LaTeX — это программная система для подготовки документов. При написании писатель использует обычный текст, а не форматированный текст, который можно найти в текстовых процессорах «что видишь, то и получишь», таких как Microsoft Word, LibreOffice Writer и Apple Pages. Автор использует соглашения о тегах разметки, чтобы определить общую структуру документа, стилизовать текст по всему документу (например, выделить жирным шрифтом и курсивом), а также добавить цитаты и перекрестные ссылки. Дистрибутив TeX, такой как TeX Live или MiKTeX, используется для создания выходного файла (например, PDF или DVI), подходящего для печати или цифрового распространения.\nLaTeX широко используется в научных кругах для обмена и публикации научных документов во многих областях, включая математику, информатику, инженерию, физику, химию, экономику, лингвистику, количественную психологию, философию и политологию. Он также играет заметную роль в подготовке и публикации книг и статей, содержащих сложные многоязычные материалы, такие как санскрит и греческий. LaTeX использует программу набора текста TeX для форматирования своего вывода и сам написан на языке макросов TeX.\nLaTeX можно использовать как самостоятельную систему подготовки документов или как промежуточный формат. Например, в последней роли он иногда используется как часть конвейера для перевода DocBook и других форматов на основе XML в PDF. Система набора текста предлагает программируемые функции настольной издательской системы и широкие возможности для автоматизации большинства аспектов набора текста и настольной публикации, включая нумерацию и перекрестные ссылки на таблицы и рисунки, заголовки глав и разделов, включение графики, макет страницы, индексирование и библиографии.\nКак и TeX, LaTeX начинался как инструмент письма для математиков и специалистов по информатике, но даже с самого начала своего развития он также использовался учеными, которым нужно было писать документы, содержащие сложные математические выражения или нелатинские шрифты, такие как арабский. , деванагари и китайский.\nLaTeX предназначен для предоставления описательного языка разметки высокого уровня, который упрощает доступ к возможностям TeX для писателей. По сути, TeX обрабатывает макет, а LaTeX — контент для обработки документов. LaTeX включает в себя набор макросов TeX и программу для обработки документов LaTeX, и, поскольку простые команды форматирования TeX являются элементарными, он предоставляет авторам готовые команды для требований форматирования и макета, таких как заголовки глав, сноски, перекрестные ссылки и библиографии. .\nПервоначально LaTeX был написан в начале 1980-х годов Лесли Лэмпорт из SRI International. Текущая версия — LaTeX2e (стилизованная под LATEX2ε), выпущенная в 1994 году, но обновленная в 2020 году. LaTeX3 (LATEX3) находится в стадии длительной разработки с начала 1990-х годов. LaTeX является бесплатным программным обеспечением и распространяется под лицензией LaTeX Project Public License (LPPL).\nСистема набора текста  LaTeX пытается следовать философии дизайна, отделяя презентацию от контента, чтобы авторы могли сосредоточиться на содержании того, что они пишут, не обращая внимания одновременно на его внешний вид. При подготовке документа LaTeX автор указывает логическую структуру, используя простые знакомые понятия, такие как глава, раздел, таблица, рисунок и т. д., и позволяет системе LaTeX обрабатывать форматирование и расположение этих структур. В результате он поощряет отделение макета от содержимого, но при этом позволяет вносить коррективы вручную, когда это необходимо. Эта концепция аналогична механизму, с помощью которого многие текстовые процессоры позволяют определять стили глобально для всего документа, или использованию каскадных таблиц стилей для оформления HTML-документов.\nСистема LaTeX — это язык разметки, который управляет набором текста и визуализацией и может быть произвольно расширен за счет использования базового макроязыка для разработки пользовательских макросов, таких как новые среды и команды. Такие макросы часто собираются в пакеты, которые затем можно сделать доступными для решения некоторых конкретных задач набора текста, таких как форматирование сложных математических выражений или графики (например, использование среды align, предоставляемой пакетом amsmath, для создания согласованные уравнения).\nЧтобы создать документ в LaTeX, вы сначала пишете файл, скажем, document.tex, используя предпочитаемый вами текстовый редактор. Затем вы передаете свой файл document.tex в качестве входных данных для программы TeX (с загруженными макросами LaTeX), которая предлагает TeX записать файл, подходящий для просмотра на экране или печати. Этот цикл «запись-формат-предварительный просмотр» является одним из основных отличий работы с LaTeX от стиля редактирования документов «что видишь, то и получаешь» (WYSIWYG). Это похоже на известный программистам цикл код-компиляция-выполнение. Сегодня многие программы редактирования, поддерживающие LaTeX, делают …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"75b881dcb33092e405db4b74fe9a32a0","permalink":"https://example.com/ru/post/latex/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/latex/","section":"post","summary":"LaTeX — это программная система для подготовки документов.","tags":["Academic"],"title":"LaTeX","type":"post"},{"authors":["Абдулфазов Мансур"],"categories":["Demo"],"content":"Обзор  Доступ к Portage\nГрафический интерфейс Porthole. Portage похож на управление пакетами в стиле BSD, известное как порты, и изначально был разработан с учетом портов FreeBSD. Portage написан на языке программирования Python и является основной утилитой, определяющей Gentoo. Хотя сама система известна как Portage, она состоит из двух основных частей: системы ebuild и emerge. Система ebuild берет на себя фактическую работу по сборке и установке пакетов, тогда как emerge предоставляет интерфейс для ebuild: управление репозиторием ebuild, разрешение зависимостей и подобные проблемы. (Поэтому эти два параметра имеют примерно такое же отношение, как rpm к yum или dpkg к APT.)\nГрафический интерфейс Portage на основе GTK+ доступен для работы с Portage. Существует также графический интерфейс Himerge, что означает «интерфейс Haskell для eMerge».\nПредоставленные функции\nPortage характеризуется своей основной функцией: компиляцией из исходного кода пакетов, которые пользователь хочет установить. При этом он позволяет настраивать параметры компилятора и целевого приложения в соответствии со спецификациями системы и собственными пожеланиями пользователя. Функции, связанные с управлением системой, включают в себя: возможность параллельной установки версий пакетов, отслеживание зависимостей между пакетами, управление базой данных установленных пакетов, предоставление локального репозитория ebuild-файлов и синхронизацию локального дерева Portage с удаленными репозиториями. Функциональные возможности, связанные с установкой отдельных пакетов, включают: указание параметров компиляции для целевой машины и выбор компонентов пакета.\nPortage различает три уровня стабильности в ebuild-файлах: стабильный (например, программное обеспечение работает, как задумано, без известных проблем с безопасностью на момент выпуска), замаскированный по ключевому слову (в основном для пакетов, которые не были достаточно протестированы на целевой архитектуре системы, чтобы их можно было рассматривать). стабильный) и жестко замаскированные (сломанные или очень небезопасные) пакеты.\nФункции  Появляться\nОтключение файлового менеджера SpaceFM Инструмент командной строки emerge является сердцем Portage. Команда настраивается с помощью множества параметров и модификаторов. Инструмент emerge — самая важная утилита для доступа к функциям Portage из командной строки.\nПрограмма вычисляет и управляет зависимостями, выполняет ебилды и поддерживает локальное дерево портежей и базу данных установленных пакетов. Параметры компиляции, используемые ebuild-файлами, можно изменить с помощью переменной среды CFLAGS в зависимости от характеристик отдельного компьютера и желания пользователя оптимизировать его. Утилита emerge запускает ебилды в песочнице. Таким образом, система защищена от программного обеспечения, запускаемого ebuild-файлом, а результирующие двоичные файлы объединяются только после успешной сборки и установки в песочнице.\nТо, что emerge устанавливает в качестве зависимостей, зависит от настроек USE-флагов. Они решают, какие дополнительные функции будут включены при установке или обновлении приложения. Команду emerge также можно использовать для загрузки и установки предварительно скомпилированных двоичных файлов.\nUSE-флаги\nPortage во время обновления системы Система Portage предлагает использование «USE-флагов», которые позволяют пользователям указывать, какие функции программного обеспечения они хотели бы включить (или исключить) при создании пакетов. Например, есть флаг USE для включения поддержки DVD, если она доступна, в пакеты, скомпилированные с включенным флагом. USE-флаги влияют на то, какие зависимости требуются, как правило, на то, какие дополнительные функции будут встроены в данную программу при ее компиляции. Например, в пакетах, использующих скрипт configure, функция флага USE будет преобразована в ./configure –with-feature.\nСпецификация USE-флагов — это обычный способ настройки программ в Gentoo. USE-флаги можно устанавливать вручную или с помощью удобных инструментов, таких как ufed (редактор USE-флагов), в котором перечислены флаги вместе с их описанием. Список доступных USE-флагов доступен на веб-сайте Gentoo в списке USE-флагов.\nПоявляться\nОтключение файлового менеджера SpaceFM Инструмент командной строки emerge является сердцем Portage. Команда настраивается с помощью множества параметров и модификаторов. Инструмент emerge — самая важная утилита для доступа к функциям Portage из командной строки.\nПрограмма вычисляет и управляет зависимостями, выполняет ебилды и поддерживает локальное дерево портежей и базу данных установленных пакетов. Параметры компиляции, используемые ebuild-файлами, можно изменить с помощью переменной среды CFLAGS в зависимости от характеристик отдельного компьютера и желания пользователя оптимизировать его. Утилита emerge запускает ебилды в песочнице. Таким образом, система защищена от программного обеспечения, запускаемого ebuild-файлом, а результирующие двоичные файлы объединяются только после успешной …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"4e160eb59b89190db4480c07ffc3966a","permalink":"https://example.com/ru/post/portage/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/portage/","section":"post","summary":"Portage — это система управления пакетами, изначально созданная и используемая Gentoo Linux, а также Chrome OS, Calculate, Sabayon и Funtoo Linux среди прочих. Portage основан на концепции коллекций портов. Gentoo иногда называют метадистрибутивом из-за чрезвычайной гибкости Portage, которая делает его независимым от операционной системы. Проект Gentoo/Alt связан с использованием Portage для управления другими операционными системами, такими как BSD, macOS и Solaris. Наиболее примечательной из этих реализаций является проект Gentoo/FreeBSD.","tags":["Academic"],"title":"Система оправления пакетами Portage","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Абдулфазов Мансур","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://example.com/ru/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]